name: Auto Increment Version and Create Release

on:
  workflow_dispatch:
    inputs:
      increment_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - major
          - minor
          - patch
      prerelease:
        description: 'Create prerelease?'
        required: false
        default: false
        type: boolean

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
    
    - name: Get current version
      id: current_version
      run: |
        # Get the latest tag or default to 0.1.0
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        echo "CURRENT_VERSION=$LATEST_TAG" >> $GITHUB_ENV
        echo "Current version: $LATEST_TAG"
    
    - name: Calculate new version
      id: new_version
      run: |
        # Remove 'v' prefix if present
        CURRENT=${GITHUB_ENV#v}
        # Split version into components
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT"
        
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment based on input
        case ${{ github.event.inputs.increment_type }} in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
        echo "New version: $NEW_VERSION"
        
        # Also create the version without 'v' prefix for setup.py
        VERSION_WITHOUT_V="$MAJOR.$MINOR.$PATCH"
        echo "VERSION_WITHOUT_V=$VERSION_WITHOUT_V" >> $GITHUB_ENV
    
    - name: Update version in setup.py
      run: |
        sed -i "s/version=\"[^\"]*\"/version=\"$VERSION_WITHOUT_V\"/g" setup.py
    
    - name: Update version in pyproject.toml
      run: |
        sed -i "s/version = \"[^\"]*\"/version = \"$VERSION_WITHOUT_V\"/g" pyproject.toml
    
    - name: Commit and push version update
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add setup.py pyproject.toml
        git commit -m "Update version to $NEW_VERSION"
        git push origin main
    
    - name: Create new tag
      run: |
        git tag $NEW_VERSION
        git push origin $NEW_VERSION
    
    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_VERSION }}
        release_name: Release ${{ env.NEW_VERSION }}
        draft: false
        prerelease: ${{ github.event.inputs.prerelease }}