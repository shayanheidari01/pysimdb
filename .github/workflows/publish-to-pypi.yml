name: Publish Python Package to PyPI

on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Get release version
      id: get_version
      run: |
        # Get version from release tag
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION_TAG="${{ github.event.release.tag_name }}"
        else
          # For manual runs, get latest tag or default
          VERSION_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
        fi
        
        # Remove 'v' prefix if present
        VERSION_WITHOUT_V=${VERSION_TAG#v}
        echo "VERSION_WITHOUT_V=$VERSION_WITHOUT_V" >> $GITHUB_ENV
        echo "Using version: $VERSION_WITHOUT_V"
    
    - name: Update version in setup.py
      run: |
        # Update version in setup.py
        sed -i "s/version=\"[^\"]*\"/version=\"$VERSION_WITHOUT_V\"/g" setup.py
    
    - name: Update version in pyproject.toml
      run: |
        # Update version in pyproject.toml
        sed -i "s/version = \"[^\"]*\"/version = \"$VERSION_WITHOUT_V\"/g" pyproject.toml
    
    - name: Build package
      run: |
        python -m build
    
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
        skip_existing: true